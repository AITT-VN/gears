Playing field
- more maps, more challenges
- ideas are welcome
- detailed designs and graphics are better
- pull requests for completed code is best!

Robot / pybricks
- realism is not the main focus, but where practicable, I would like the simulator to behave at least close to a real robot
- testing and measurements of physical robot parameters
- testing / advice on API behavior, particularly for pybricks.

Documentation
- most blocks are undocumented
- currently zero tutorials

Blocks
- Plan and code. These needs to be aligned to both the Pybricks and Ev3dev API.
  - Convenience blocks for arm and magnet

Coding (Python editor)
- Add autocomplete to the Ace editor
- Documentation panel?

Coding (Blockly)
- Add multiple pages for blockly editor

Coding (Robot configurator)
- Add in robot configurator
- Save/load robot configuration

Coding (Map configurator)
- Save / Load map configuration

Coding (Simulator)
- Implement Pybricks support (...run, not just generate code)
- More components
  - rotating platform
  - laser rangefinder (simplified ultrasonic)
  - paint ball launcher
  - gps (x, y coordinates)
  - object of interest radar (direction and range of object)
  - radio (communications between robots)
  - claw
  - linear actuator
  - camera (array of rgb/hsv for image recognition. Is skulpt fast enough? Without numpy?)
  - touch sensor (simplified laser rangefinder with very short range)
- Multi-robot arena

Coding (Sharing)
- Remote coach view of student's work
- Spectator mode. Run code on one computer, but rendered and view on multiple.